// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: species.sql

package db

import (
	"context"
)

const countSpecies = `-- name: CountSpecies :one
SELECT COUNT(*) FROM species
`

func (q *Queries) CountSpecies(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countSpecies)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createSpecies = `-- name: CreateSpecies :one
INSERT INTO species (scientific_name, common_name, native, taxa)
VALUES ($1, $2, $3, $4)
RETURNING id, scientific_name, common_name, native, taxa
`

type CreateSpeciesParams struct {
	ScientificName string `json:"scientific_name"`
	CommonName     string `json:"common_name"`
	Native         bool   `json:"native"`
	Taxa           Taxa   `json:"taxa"`
}

func (q *Queries) CreateSpecies(ctx context.Context, arg CreateSpeciesParams) (Species, error) {
	row := q.db.QueryRow(ctx, createSpecies,
		arg.ScientificName,
		arg.CommonName,
		arg.Native,
		arg.Taxa,
	)
	var i Species
	err := row.Scan(
		&i.ID,
		&i.ScientificName,
		&i.CommonName,
		&i.Native,
		&i.Taxa,
	)
	return i, err
}

const deleteSpecies = `-- name: DeleteSpecies :exec
DELETE FROM species
WHERE id = $1
`

func (q *Queries) DeleteSpecies(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteSpecies, id)
	return err
}

const getSpecies = `-- name: GetSpecies :one
SELECT id, scientific_name, common_name, native, taxa FROM species
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetSpecies(ctx context.Context, id int64) (Species, error) {
	row := q.db.QueryRow(ctx, getSpecies, id)
	var i Species
	err := row.Scan(
		&i.ID,
		&i.ScientificName,
		&i.CommonName,
		&i.Native,
		&i.Taxa,
	)
	return i, err
}

const listSpecies = `-- name: ListSpecies :many
SELECT id, scientific_name, common_name, native, taxa FROM species
ORDER BY scientific_name
`

func (q *Queries) ListSpecies(ctx context.Context) ([]Species, error) {
	rows, err := q.db.Query(ctx, listSpecies)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Species
	for rows.Next() {
		var i Species
		if err := rows.Scan(
			&i.ID,
			&i.ScientificName,
			&i.CommonName,
			&i.Native,
			&i.Taxa,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchSpecies = `-- name: SearchSpecies :many
SELECT id, scientific_name, common_name, native, taxa FROM species
WHERE scientific_name ILIKE $1 OR common_name ILIKE $1
ORDER BY scientific_name
`

func (q *Queries) SearchSpecies(ctx context.Context, scientificName string) ([]Species, error) {
	rows, err := q.db.Query(ctx, searchSpecies, scientificName)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Species
	for rows.Next() {
		var i Species
		if err := rows.Scan(
			&i.ID,
			&i.ScientificName,
			&i.CommonName,
			&i.Native,
			&i.Taxa,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSpecies = `-- name: UpdateSpecies :one
UPDATE species
SET scientific_name = $2, common_name = $3, native = $4, taxa = $5
WHERE id = $1
RETURNING id, scientific_name, common_name, native, taxa
`

type UpdateSpeciesParams struct {
	ID             int64  `json:"id"`
	ScientificName string `json:"scientific_name"`
	CommonName     string `json:"common_name"`
	Native         bool   `json:"native"`
	Taxa           Taxa   `json:"taxa"`
}

func (q *Queries) UpdateSpecies(ctx context.Context, arg UpdateSpeciesParams) (Species, error) {
	row := q.db.QueryRow(ctx, updateSpecies,
		arg.ID,
		arg.ScientificName,
		arg.CommonName,
		arg.Native,
		arg.Taxa,
	)
	var i Species
	err := row.Scan(
		&i.ID,
		&i.ScientificName,
		&i.CommonName,
		&i.Native,
		&i.Taxa,
	)
	return i, err
}
