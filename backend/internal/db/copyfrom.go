// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: copyfrom.go

package db

import (
	"context"
)

// iteratorForCreateObservations implements pgx.CopyFromSource.
type iteratorForCreateObservations struct {
	rows                 []CreateObservationsParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateObservations) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateObservations) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].SiteID,
		r.rows[0].SpeciesID,
		r.rows[0].Timestamp,
		r.rows[0].Method,
		r.rows[0].AppearanceTime,
		r.rows[0].Temperature,
		r.rows[0].Narrative,
		r.rows[0].Confidence,
	}, nil
}

func (r iteratorForCreateObservations) Err() error {
	return nil
}

func (q *Queries) CreateObservations(ctx context.Context, arg []CreateObservationsParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"observations"}, []string{"site_id", "species_id", "timestamp", "method", "appearance_time", "temperature", "narrative", "confidence"}, &iteratorForCreateObservations{rows: arg})
}
