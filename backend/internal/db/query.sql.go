// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package db

import (
	"context"
)

const getSite = `-- name: GetSite :one
SELECT id, code, block, name, location, tenure, forest FROM sites
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetSite(ctx context.Context, id int64) (Site, error) {
	row := q.db.QueryRow(ctx, getSite, id)
	var i Site
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Block,
		&i.Name,
		&i.Location,
		&i.Tenure,
		&i.Forest,
	)
	return i, err
}

const listSites = `-- name: ListSites :many
SELECT id, code, block, name, location, tenure, forest FROM sites
ORDER BY name
`

func (q *Queries) ListSites(ctx context.Context) ([]Site, error) {
	rows, err := q.db.Query(ctx, listSites)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Site
	for rows.Next() {
		var i Site
		if err := rows.Scan(
			&i.ID,
			&i.Code,
			&i.Block,
			&i.Name,
			&i.Location,
			&i.Tenure,
			&i.Forest,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
